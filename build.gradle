plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'idea'

version = mod_version
group = mod_packagename
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: mod_minecraft_version
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }

     flatDir {
         dir 'libs'
     }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mod_minecraft_version}-${forge_version}"

    runtimeOnly fg.deobf("curse.maven:pipez-${pipez_mod_id}:${pipez_mod_file_id}")
    runtimeOnly fg.deobf("curse.maven:refined-storage-${refinedstorage_mod_id}:${refinedstorage_mod_file_id}")
    runtimeOnly fg.deobf("curse.maven:mekanism-${mekanism_mod_id}:${mekanism_mod_file_id}")
//    runtimeOnly fg.deobf("curse.maven:applied-energistics2-223794:4498125")
    runtimeOnly fg.deobf("curse.maven:thermal-dynamics-227443:4391160")
    runtimeOnly fg.deobf("curse.maven:thermal-foundation-222880:4760629")
    runtimeOnly fg.deobf("curse.maven:cofh-core-69162:4759876")
    runtimeOnly fg.deobf("curse.maven:construction-wand-399558:4455719")
    runtimeOnly fg.deobf("curse.maven:pretty-pipes-376737:4049655")
    runtimeOnly fg.deobf("curse.maven:jei-238222:4494410")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : mod_vendor,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


processResources {
    filesMatching('**/*.toml') {
        expand(
                'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_vendor': mod_vendor,
                'mod_name': mod_name,
                'mod_forge_version': mod_forge_version,
                'mod_loader_version': mod_loader_version,
                'mod_minecraft_version': mod_minecraft_version,
        )
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
